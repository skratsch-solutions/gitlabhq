- page_title _("To-Do List")

= render_two_factor_auth_recovery_settings_check
= render_dashboard_ultimate_trial(current_user)

= render_if_exists 'shared/dashboard/saml_reauth_notice',
  groups_requiring_saml_reauth: todo_groups_requiring_saml_reauth(@todos)

- add_page_specific_style 'page_bundles/todos'
- add_issuable_stylesheet
- filter_by_done = params[:state] == 'done'
- open_todo_count = todos_has_filtered_results? && !filter_by_done ? @allowed_todos.count : todos_pending_count
- done_todo_count = todos_has_filtered_results? && filter_by_done ? @allowed_todos.count : todos_done_count
- user_have_todos = current_user.todos.any?
- show_header = @allowed_todos.any? || user_have_todos

- if show_header
  = render ::Layouts::PageHeadingComponent.new(_('To-Do List'))

.js-todos-all
  - if user_have_todos
    .top-area
      = gl_tabs_nav({ class: 'gl-grow gl-border-0' }) do
        = gl_tab_link_to todos_filter_path(state: 'pending'), item_active: params[:state].blank? || params[:state] == 'pending', class: "js-todos-pending" do
          = _("To Do")
          = gl_tab_counter_badge(number_with_delimiter(open_todo_count), { class: 'js-todos-badge' })
        = gl_tab_link_to todos_filter_path(state: 'done'), item_active: filter_by_done, class: "js-todos-done" do
          = _("Done")
          = gl_tab_counter_badge(number_with_delimiter(done_todo_count), { class: 'js-todos-badge' })

      .nav-controls
        - if @allowed_todos.any?(&:pending?)
          .gl-mr-3
            = render Pajamas::ButtonComponent.new(button_options: { class: 'gl-items-center js-todos-mark-all'}, method: :delete, href: destroy_all_dashboard_todos_path(todos_filter_params)) do
              = gl_loading_icon(inline: true, css_class: 'hidden')
              = s_("Todos|Mark all as done")
            = render Pajamas::ButtonComponent.new(button_options: { class: 'gl-items-center js-todos-undo-all hidden'}, method: :patch, href: bulk_restore_dashboard_todos_path(todos_filter_params)) do
              = gl_loading_icon(inline: true, css_class: 'hidden')
              = s_("Todos|Undo mark all as done")

    .todos-filters
      .issues-details-filters.row-content-block.second-block
        = form_tag todos_filter_path(without: [:project_id, :author_id, :type, :action_id]), method: :get, class: 'filter-form gl-flex gl-flex-col sm:gl-flex-row' do
          .filter-categories.gl-flex.gl-flex-col.md:gl-flex-row.gl-grow.gl-flex-wrap.-gl-mx-2
            .filter-item.gl-m-2
              - if params[:group_id].present?
                = hidden_field_tag(:group_id, params[:group_id])
              = dropdown_tag(group_dropdown_label(params[:group_id], _("Group")), options: { toggle_class: 'js-group-search js-filter-submit gl-w-full sm:gl-w-auto', title: s_("Todos|Filter by group"), filter: true, filterInput: 'input#group-search', dropdown_class: 'dropdown-menu-selectable dropdown-menu-group js-filter-submit', placeholder: _("Search groups"), data: { default_label: _("Group"), display: 'static', testid: 'group-dropdown' } })
            .filter-item.gl-m-2
              - if params[:project_id].present?
                = hidden_field_tag(:project_id, params[:project_id])
              = dropdown_tag(project_dropdown_label(params[:project_id], _("Project")), options: { toggle_class: 'js-project-search js-filter-submit gl-w-full sm:gl-w-auto', title: s_("Todos|Filter by project"), filter: true, filterInput: 'input#project-search', dropdown_class: 'dropdown-menu-selectable dropdown-menu-project js-filter-submit', placeholder: _("Search projects"), data: { default_label: _("Project"), display: 'static' } })
            .filter-item.gl-m-2
              - if params[:author_id].present?
                = hidden_field_tag(:author_id, params[:author_id])
              = dropdown_tag(user_dropdown_label(params[:author_id], _("Author")), options: { toggle_class: 'js-user-search js-filter-submit js-author-search gl-w-full sm:gl-w-auto', title: s_("Todos|Filter by author"), filter: true, filterInput: 'input#author-search', dropdown_class: 'dropdown-menu-user dropdown-menu-selectable dropdown-menu-author js-filter-submit', placeholder: _("Search authors"), data: { any_user: _("Any Author"), first_user: (current_user.username if current_user), project_id: (@project.id if @project), selected: params[:author_id], field_name: 'author_id', default_label: _("Author"), todo_filter: true, todo_state_filter: params[:state] || 'pending' } })
            .filter-item.gl-m-2
              - if params[:type].present?
                = hidden_field_tag(:type, params[:type])
              = dropdown_tag(todo_types_dropdown_label(params[:type], _("Type")), options: { toggle_class: 'js-type-search js-filter-submit gl-w-full sm:gl-w-auto', dropdown_class: 'dropdown-menu-selectable dropdown-menu-type js-filter-submit', data: { data: todo_types_options, default_label: _("Type") } })
            .filter-item.actions-filter.gl-m-2
              - if params[:action_id].present?
                = hidden_field_tag(:action_id, params[:action_id])
              = dropdown_tag(todo_actions_dropdown_label(params[:action_id], _("Action")), options: { toggle_class: 'js-action-search js-filter-submit gl-w-full sm:gl-w-auto', dropdown_class: 'dropdown-menu-selectable dropdown-menu-action js-filter-submit', data: { data: todo_actions_options, default_label: _("Action") } })
          .filter-item.sort-filter.gl-my-2
            .dropdown
              %button.dropdown-menu-toggle.dropdown-menu-toggle-sort{ type: 'button', class: 'gl-w-full sm:gl-w-auto', 'data-toggle' => 'dropdown' }
                %span.light
                - if @sort.present?
                  = sort_options_hash[@sort]
                - else
                  = sort_title_recently_created
                = sprite_icon('chevron-down', css_class: 'dropdown-menu-toggle-icon')
              %ul.dropdown-menu.dropdown-menu-sort.dropdown-menu-right
                %li
                  = link_to todos_filter_path(sort: sort_value_label_priority) do
                    = sort_title_label_priority
                  = link_to todos_filter_path(sort: sort_value_recently_created) do
                    = sort_title_recently_created
                  = link_to todos_filter_path(sort: sort_value_oldest_created) do
                    = sort_title_oldest_created
                  = link_to todos_filter_path(sort: sort_value_recently_updated) do
                    = sort_title_recently_updated

  - if @allowed_todos.any?
    .js-todos-list-container{ data: { testid: "todos-list-container" } }
      %ul.content-list.todos-list
        = render @allowed_todos
      = paginate @todos, theme: "gitlab"

    .js-nothing-here-container.hidden
      = render Pajamas::EmptyStateComponent.new(svg_path: 'illustrations/empty-todos-all-done-md.svg',
        title: s_("Todos|You're all done!"))

  - elsif user_have_todos
    - empty_state_image = (!todos_filter_empty? && !todos_has_filtered_results?) ? 'illustrations/empty-todos-all-done-md.svg' : 'illustrations/empty-todos-md.svg'
    - empty_state_title = s_("Todos|Nothing is on your to-do list. Nice work!")
    - if todos_filter_empty?
      - empty_state_title = no_todos_messages.sample
    - elsif todos_has_filtered_results?
      - empty_state_title = _("Sorry, your filter produced no results")

    = render Pajamas::EmptyStateComponent.new(svg_path: empty_state_image,
      title: empty_state_title) do |c|
      - c.with_description do
        - if todos_filter_empty?
          %p
            = (s_("Todos|Not sure where to go next? Take a look at your %{strongStart}%{assignedIssuesLinkStart}assigned issues%{assignedIssuesLinkEnd}%{strongEnd} or %{strongStart}%{mergeRequestLinkStart}merge requests%{mergeRequestLinkEnd}%{mergeRequestLinkEnd}%{strongEnd}.") % { strongStart: '<strong>', strongEnd: '</strong>', assignedIssuesLinkStart: "<a href=\"#{issues_dashboard_path(assignee_username: current_user.username)}\">", assignedIssuesLinkEnd: '</a>', mergeRequestLinkStart: "<a href=\"#{merge_requests_dashboard_path(assignee_username: current_user.username)}\">", mergeRequestLinkEnd: '</a>' }).html_safe
          %p
            = link_to s_("Todos| What actions create to-do items?"), help_page_path('user/todos.md', anchor: 'actions-that-create-to-do-items'), target: '_blank', rel: 'noopener noreferrer'

        - elsif todos_has_filtered_results?
          %p
            = link_to s_("Todos|Do you want to remove the filters?"), todos_filter_path(without: [:project_id, :author_id, :type, :action_id])

  - else
    = render 'dashboard/todos/user_has_no_todos'
