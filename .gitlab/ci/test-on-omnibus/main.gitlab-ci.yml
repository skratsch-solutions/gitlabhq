# E2E tests pipeline loaded dynamically by script: scripts/generate-e2e-pipeline
# For adding new tests, refer to: doc/development/testing_guide/end_to_end/test_pipelines.md
include:
  - local: .gitlab/ci/qa-common/main.gitlab-ci.yml
  - local: .gitlab/ci/qa-common/rules.gitlab-ci.yml
  - local: .gitlab/ci/qa-common/variables.gitlab-ci.yml
  - local: .gitlab/ci/qa-common/omnibus.gitlab-ci.yml

# ==========================================
# Prepare stage
# ==========================================
check-release-set:
  extends:
    - .rules:prepare
    - .check-release-set

# ==========================================
# Test stage
# ==========================================

# ------------------------------------------
# Manual jobs
# ------------------------------------------

# Run manual quarantine job
#   this job requires passing QA_SCENARIO variable
#   and optionally QA_TESTS to run specific quarantined tests
_quarantine:
  extends:
    - .qa
    - .rules:test:manual-except-default-branch
  stage: test
  variables:
    QA_RSPEC_TAGS: --tag quarantine
  after_script:
    - echo "After script overridden in _quarantine job"
  artifacts:
    when: always
    expire_in: 1 day
    paths:
      - gitlab-qa-run-*/**/test-metrics-*.json

# ------------------------------------------
# Test jobs
# ------------------------------------------

# ========== instance ===========
instance:
  extends:
    - .parallel
    - .qa
  variables:
    QA_SCENARIO: Test::Instance::Image
    QA_RUN_IN_PARALLEL: true
    QA_PARALLEL_PROCESSES: 6
  rules:
    - !reference [.rules:test:smoke-for-omnibus-mr, rules]
    - if: $QA_SUITES =~ /Test::Instance::All/

# ========== praefect ===========
praefect:
  extends:
    - .parallel
    - .qa
  variables:
    QA_SCENARIO: Test::Integration::Praefect
    QA_CAN_TEST_PRAEFECT: "true"
    QA_GITALY_TRANSACTIONS_ENABLED: "false"
  rules:
    - !reference [.rules:test:smoke-for-omnibus-mr, rules]
    - if: $QA_SUITES =~ /Test::Instance::All/

# ========== gitaly transactions enabled ===========
# https://docs.gitlab.com/ee/architecture/blueprints/gitaly_transaction_management/
gitaly-transactions:
  extends:
    - .parallel
    - .qa
    - .with-ignored-runtime-data
  variables:
    QA_SCENARIO: Test::Integration::Praefect
    QA_CAN_TEST_PRAEFECT: "true"
    QA_GITALY_TRANSACTIONS_ENABLED: "true"
    QA_RUN_IN_PARALLEL: true
    QA_PARALLEL_PROCESSES: 6
  rules:
    - if: $QA_SUITES =~ /Test::Instance::All/

# ========== gitaly reftables backend ===========
# Verifies that E2E tests that interact with the gitaly backend work when the reftables backend is in use
# https://about.gitlab.com/blog/2024/05/30/a-beginners-guide-to-the-git-reftable-format/
# https://gitlab.com/groups/gitlab-org/-/epics/14946
gitaly-reftables-backend:
  extends:
    - .parallel
    - .qa
    - .with-ignored-runtime-data
  variables:
    QA_SCENARIO: Test::Integration::Praefect
    QA_CAN_TEST_PRAEFECT: "true"
    QA_FEATURE_FLAGS: "gitaly_new_repo_reftable_backend=enabled"
  rules:
    - if: $QA_SUITES =~ /Test::Instance::All/

# ========== git sha256 enabled ===========
git-sha256-repositories:
  when: manual
  extends:
    - .parallel
    - .qa
    - .with-ignored-runtime-data
  variables:
    QA_SCENARIO: Test::Instance::Image
    QA_USE_SHA256_REPOSITORY_OBJECT_STORAGE: true
    GITLAB_QA_OPTS: "--enable-feature support_sha256_repositories"
  rules:
    - if: $QA_SUITES =~ /Test::Instance::All/

gitaly-cluster:
  extends: .qa
  variables:
    QA_SCENARIO: Test::Integration::GitalyCluster
  rules:
    - if: $QA_SUITES =~ /Test::Integration::GitalyCluster/

group-saml:
  extends: .qa
  variables:
    QA_SCENARIO: Test::Integration::GroupSAML
  rules:
    - if: $QA_SUITES =~ /Test::Integration::GroupSAML/

oauth:
  extends:
    - .qa
  variables:
    QA_SCENARIO: Test::Instance::Image
    QA_GITLAB_HOSTNAME: "gitlab"
    QA_GITLAB_USE_TLS: "true"
    QA_RSPEC_TAGS: --tag oauth
    GITLAB_QA_OPTS: --omnibus-config github_oauth
  rules:
    - if: $QA_SUITES =~ /Test::Integration::OAuth/

instance-saml:
  extends: .qa
  variables:
    QA_SCENARIO: Test::Integration::InstanceSAML
  rules:
    - if: $QA_SUITES =~ /Test::Integration::InstanceSAML/

jira:
  extends:
    - .qa
  variables:
    QA_SCENARIO: Test::Integration::Jira
  rules:
    - if: $QA_SUITES =~ /Test::Integration::Jira/

integrations:
  extends: .qa
  variables:
    QA_SCENARIO: Test::Integration::Integrations
  rules:
    - if: $QA_SUITES =~ /Test::Integration::Integrations/

ldap-no-server:
  extends: .qa
  variables:
    QA_SCENARIO: Test::Integration::LDAPNoServer
  rules:
    - if: $QA_SUITES =~ /Test::Integration::LDAPNoServer/

ldap-tls:
  extends: .qa
  variables:
    QA_SCENARIO: Test::Integration::LDAPTLS
  rules:
    - if: $QA_SUITES =~ /Test::Integration::LDAPTLS/

ldap-no-tls:
  extends: .qa
  variables:
    QA_SCENARIO: Test::Integration::LDAPNoTLS
  rules:
    - if: $QA_SUITES =~ /Test::Integration::LDAPNoTLS/

mtls:
  extends: .qa
  variables:
    QA_SCENARIO: Test::Integration::MTLS
  rules:
    - if: $QA_SUITES =~ /Test::Integration::Mtls/

mattermost:
  extends:
    - .qa
  variables:
    QA_SCENARIO: Test::Integration::Mattermost
  rules:
    - if: $QA_SUITES =~ /Test::Integration::Mattermost/

registry:
  extends:
    - .qa
  variables:
    QA_SCENARIO: Test::Integration::Registry
  rules:
    - if: $QA_SUITES =~ /Test::Integration::Registry/

repository-storage:
  extends:
    - .qa
  variables:
    QA_SCENARIO: Test::Instance::RepositoryStorage
  rules:
    - if: $QA_SUITES =~ /Test::Instance::RepositoryStorage/

service-ping-disabled:
  extends:
    - .qa
    - .failure-videos
  variables:
    QA_SCENARIO: Test::Integration::ServicePingDisabled
  rules:
    - if: $QA_SUITES =~ /Test::Integration::ServicePingDisabled/

smtp:
  extends:
    - .qa
  variables:
    QA_SCENARIO: Test::Integration::SMTP
  rules:
    - if: $QA_SUITES =~ /Test::Integration::SMTP/

cloud-activation:
  extends:
    - .qa
  variables:
    QA_SCENARIO: Test::Instance::Image
    QA_RSPEC_TAGS: --tag cloud_activation
  rules:
    - if: $QA_SUITES =~ /Test::Instance::CloudActivation/

metrics:
  extends: .qa
  variables:
    QA_SCENARIO: Test::Integration::Metrics
  rules:
    - if: $QA_SUITES =~ /Test::Integration::Metrics/

elasticsearch:
  extends: .qa
  variables:
    QA_SCENARIO: "Test::Integration::Elasticsearch"
  before_script:
    - !reference [.qa, before_script]
  rules:
    - !reference [.rules:test:ee-only, rules]
    - if: $QA_SUITES =~ /Test::Integration::Elasticsearch/

importers:
  extends:
    - .qa
  variables:
    QA_SCENARIO: Test::Integration::Import
    QA_MOCK_GITHUB: "true"
  rules:
    - if: $QA_SUITES =~ /Test::Integration::Import/

import-with-smtp:
  extends:
    - .qa
    - .failure-videos
  variables:
    QA_SCENARIO: Test::Integration::ImportWithSMTP
  rules:
    - !reference [.rules:test:qa, rules]
    - if: $QA_SUITES =~ /Test::Integration::ImportWithSMTP/
    - !reference [.rules:test:manual, rules]

# ========== ai-gateway ===========
ai-gateway:
  extends:
    - .qa
  variables:
    QA_SCENARIO: Test::Integration::AiGateway
  rules:
    - if: $QA_SUITES =~ /Test::Integration::AiGateway/

ai-gateway-no-seat-assigned:
  extends:
    - .qa
  variables:
    QA_SCENARIO: Test::Integration::AiGatewayNoSeatAssigned
  rules:
    - if: $QA_SUITES =~ /Test::Integration::AiGatewayNoSeatAssigned/

ai-gateway-no-add-on:
  extends:
    - .qa
  variables:
    QA_SCENARIO: Test::Integration::AiGatewayNoAddOn
  before_script:
    - export QA_EE_ACTIVATION_CODE=$QA_EE_ACTIVATION_CODE_NO_ADD_ON
    - !reference [.qa, before_script]
  rules:
    - if: $QA_SUITES =~ /Test::Integration::AiGatewayNoAddOn/

ai-gateway-no-license:
  extends:
    - .qa
  variables:
    QA_SCENARIO: Test::Integration::AiGatewayNoLicense
  before_script:
    - unset QA_EE_LICENSE
    - !reference [.qa, before_script]
  rules:
    - if: $QA_SUITES =~ /Test::Integration::AiGatewayNoLicense/

# ========== continuous-vulnerability-scanning ===========

continuous-vulnerabiity-scanning:
  extends:
    - .qa
  variables:
    QA_SCENARIO: Test::Integration::ContinuousVulnerabilityScanning
    QA_MOCK_GITHUB: "true"
  rules:
    - !reference [.rules:test:ee-only, rules]
    - if: $QA_SUITES =~ /Test::Integration::ContinuousVulnerabilityScanning/

# ------------------------------------------
# Update jobs
# ------------------------------------------
update-minor:
  extends:
    - .qa
    - .update-script
  variables:
    UPDATE_TYPE: minor
    QA_RSPEC_TAGS: --tag health_check
  rules:
    - !reference [.rules:test:update, rules]

update-major:
  extends:
    - .qa
    - .update-script
  variables:
    UPDATE_TYPE: major
    QA_RSPEC_TAGS: --tag health_check
  rules:
    - !reference [.rules:test:update, rules]

update-ee-to-ce:
  extends:
    - .qa
    - .update-script
  variables:
    UPDATE_TYPE: minor
    UPDATE_FROM_EDITION: ee
    QA_RSPEC_TAGS: --tag health_check
  rules:
    - !reference [.rules:test:ce-only, rules]
    - !reference [.rules:test:update, rules]

# ==========================================
# Post test stage
# ==========================================
e2e-test-report:
  extends: .rules:report:allure-report
  variables:
    ALLURE_RESULTS_GLOB: "gitlab-qa-run-*/**/allure-results"

upload-test-runtime-data:
  extends:
    - .upload-test-runtime-data
    - .rules:report:upload-test-runtime-data
  variables:
    QA_JSON_REPORT_FILE_PATTERN: $CI_PROJECT_DIR/gitlab-qa-run-*/gitlab-*-qa-*/rspec-*.json

export-test-metrics:
  extends:
    - .export-test-metrics
    - .rules:report:process-results

notify-slack:
  extends:
    - .notify-slack
    - .rules:report:process-results
